// errCode generated by gocode. DO NOT EDIT!
package gencode

import (
	"context"
	"github.com/qiaogw/gocode/common/modelx"

	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"

	"gorm.io/gorm"

	_ "github.com/lib/pq"
)

type (
	genColumnModel interface {
		Insert(ctx context.Context, data *Column) (*Column, error)
		FindOne(ctx context.Context, id interface{}) (*Column, error)
		Update(ctx context.Context, newData *Column) (*Column, error)
		Delete(ctx context.Context, id interface{}) error
	}

	defaultGenColumnModel struct {
		sqlc.CachedConn
		table  string
		gormDB *gorm.DB
	}

	Column struct {
		modelx.BaseModel
		Name            string    `json:"name" form:"name" db:"name" gorm:"column:name;size:256;comment:名称;"`
		GormName        string    `json:"gormName" form:"gormName" db:"gorm_name" gorm:"column:gorm_name;size:255;comment:gorm字段名;"`
		DbType          string    `json:"dbType" form:"dbType" db:"db_type" gorm:"column:db_type;size:256;comment:数据库字段类型;"`
		DataType        string    `json:"dataType" form:"dataType" db:"data_type" gorm:"column:data_type;size:256;comment:go数据类型;"`
		DataTypeLong    string    `json:"dataTypeLong" form:"dataTypeLong" db:"data_type_long" gorm:"column:data_type_long;size:256;comment:字段长度;"`
		DataTypeApi     string    `json:"dataTypeApi" gorm:"column:data_type_api;size:256;comment:api数据类型;"`
		DataTypeProto   string    `json:"dataTypeProto" gorm:"column:data_type_proto;size:256;comment:Proto数据类型;"`
		Extra           string    `json:"extra" form:"extra" db:"extra" gorm:"column:extra;size:255;comment:扩展;"`
		ColumnComment   string    `json:"columnComment" form:"columnComment" db:"column_comment" gorm:"column:column_comment;size:255;comment:中文名;"`
		ColumnDefault   string    `json:"columnDefault" form:"columnDefault" db:"column_default" gorm:"column:column_default;size:255;comment:默认数据;"`
		SiNullable      string    `json:"siNullable" form:"siNullable" db:"si_nullable" gorm:"column:si_nullable;size:256;comment:是否为空BD;"`
		OrdinalPosition int64     `json:"ordinalPosition" form:"ordinalPosition" db:"ordinal_position" gorm:"column:ordinal_position;size:4;comment:OrdinalPosition;"`
		FieldJson       string    `json:"fieldJson" form:"fieldJson" db:"field_json" gorm:"column:field_json;size:255;comment:json字段名;"`
		Tablename       string    `json:"tablename" form:"tablename" db:"tablename" gorm:"column:tablename;size:256;comment:表名;"`
		FieldName       string    `json:"fieldName" form:"fieldName" db:"field_name" gorm:"column:field_name;size:256;comment:go字段名;"`
		DictType        string    `json:"dictType" form:"dictType" db:"dict_type" gorm:"column:dict_type;size:256;comment:关联字典;"`
		ErrorText       string    `json:"errorText" form:"errorText" db:"error_text" gorm:"column:error_text;size:256;comment:验证错误;"`
		IsPage          bool      `json:"isPage" form:"isPage" db:"is_page" gorm:"column:is_page;size:1;comment:是否页码字段;"`
		IsControl       bool      `json:"isControl" gorm:"column:is_control;size:1;comment:是否控制字段;"`
		IsModelTime     bool      `json:"isModelTime" gorm:"column:is_model_time;size:1;comment:是否控制时间字段;"`
		IsNull          bool      `json:"isNull" form:"isNull" db:"is_null" gorm:"column:is_null;size:1;comment:是否为空;"`
		Clearable       bool      `json:"clearable" form:"clearable" db:"clearable" gorm:"column:clearable;size:1;comment:是否可清空;"`
		Require         bool      `json:"require" form:"require" db:"require" gorm:"column:require;size:1;comment:是否必填;"`
		IsPk            bool      `json:"isPk" form:"isPk" db:"is_pk" gorm:"column:is_pk;size:1;comment:是否主键;"`
		IsList          bool      `json:"isList" form:"isList" db:"is_list" gorm:"column:is_list;size:1;comment:是否显示;"`
		Increment       bool      `json:"increment" form:"increment" db:"increment" gorm:"column:increment;size:1;comment:是否自增;"`
		IsEdit          bool      `json:"isEdit" form:"isEdit" db:"is_edit" gorm:"column:is_edit;size:1;comment:是否编辑;"`
		IsSort          bool      `json:"isSort" form:"isSort" db:"is_sort" gorm:"column:is_sort;size:1;comment:是否排序;"`
		HtmlType        string    `json:"htmlType" form:"htmlType" db:"html_type" gorm:"column:html_type;size:256;comment:html类型;"`
		FkTable         string    `json:"fkTable" form:"fkTable" db:"fk_table" gorm:"column:fk_table;size:256;comment:关联表;"`
		FkTableClass    string    `json:"fkTableClass" form:"fkTableClass" db:"fk_table_class" gorm:"column:fk_table_class;size:256;comment:关联类;"`
		FkTablePackage  string    `json:"fkTablePackage" form:"fkTablePackage" db:"fk_table_package" gorm:"column:fk_table_package;size:256;comment:关联包;"`
		FkLabelId       string    `json:"fkLabelId" form:"fkLabelId" db:"fk_label_id" gorm:"column:fk_label_id;size:256;comment:关联id;"`
		FkLabelName     string    `json:"fkLabelName" form:"fkLabelName" db:"fk_label_name" gorm:"column:fk_label_name;size:256;comment:关联名;"`
		Remark          string    `json:"remark" form:"remark" db:"remark" gorm:"column:remark;size:256;comment:备注;"`
		TableId         int64     `json:"tableId" comment:"" gorm:"column:table_id;size:4;comment:;"`
		Sort            int64     `json:"sort" form:"sort" db:"sort" gorm:"column:sort;comment:排序;"`
		Table           *GenTable `json:"table"`
		modelx.ControlBy
		modelx.ModelTime
	}
)

// TableName Column 表名
func (Column) TableName() string {
	return "gen_column"
}

func newGenColumnModel(conn sqlx.SqlConn, c cache.CacheConf, gormx *gorm.DB) *defaultGenColumnModel {
	_ = gormx.AutoMigrate(&Column{})
	return &defaultGenColumnModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "gen_column",
		gormDB:     gormx,
	}
}

func (m *defaultGenColumnModel) FindOne(ctx context.Context, id interface{}) (*Column, error) {
	var resp Column
	err := m.gormDB.First(&resp, id).Error
	switch err {
	case nil:
		return &resp, nil
	default:
		if err.Error() == modelx.ErrNotFound.Error() {
			return nil, modelx.ErrNotFound
		}
		return nil, err
	}
}

func (m *defaultGenColumnModel) Insert(ctx context.Context, data *Column) (*Column, error) {
	err := m.gormDB.Create(data).Error
	//var re sql.Result

	return data, err
}

func (m *defaultGenColumnModel) Update(ctx context.Context, newData *Column) (*Column, error) {
	_, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return nil, err
	}
	err = m.gormDB.Save(newData).Error
	return newData, err
}

func (m *defaultGenColumnModel) Delete(ctx context.Context, id interface{}) error {
	_, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	err = m.gormDB.Delete(&Column{}, id).Error
	return err
}

func (m *defaultGenColumnModel) tableName() string {
	return m.table
}
