// errCode generated by gocode. DO NOT EDIT!
package gencode

import (
	"context"
	"github.com/qiaogw/gocode/common/modelx"

	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"

	"gorm.io/gorm"

	_ "github.com/lib/pq"
)

type (
	genSourceModel interface {
		Insert(ctx context.Context, data *GenSource) (*GenSource, error)
		FindOne(ctx context.Context, id interface{}) (*GenSource, error)
		Update(ctx context.Context, newData *GenSource) (*GenSource, error)
		Delete(ctx context.Context, id interface{}) error
	}

	defaultGenSourceModel struct {
		sqlc.CachedConn
		table  string
		gormDB *gorm.DB
	}

	GenSource struct {
		modelx.BaseModel
		Sort        int64       `json:"sort" comment:"排序" gorm:"column:sort;size:2;comment:排序;"`
		Name        string      `json:"name" comment:"部门名称" gorm:"column:name;size:256;comment:部门名称;"`
		Driver      string      `json:"driver" comment:"dict_value" gorm:"column:driver;size:256;comment:dict_value;"`
		Host        string      `json:"host" comment:"is_default" gorm:"column:host;size:32;comment:is_default;"`
		Port        string      `json:"port" comment:"status" gorm:"column:port;size:32;comment:status;"`
		User        string      `json:"user" comment:"用户" gorm:"column:user;size:256;comment:用户;"`
		Password    string      `json:"password" comment:"密码" gorm:"column:password;size:256;comment:密码;"`
		Dbname      string      `json:"dbname" comment:"数据库" gorm:"column:dbname;size:256;comment:数据库;"`
		Config      string      `json:"config" comment:"配置" gorm:"column:config;size:256;comment:配置;"`
		TablePrefix string      `json:"tablePrefix" comment:"表前缀" gorm:"column:table_prefix;size:256;comment:表前缀;"`
		Remark      string      `json:"remark" comment:"remark" gorm:"column:remark;size:256;comment:remark;"`
		Tables      []*GenTable `json:"tables" gorm:"foreignKey:SourceId"`
		modelx.ControlBy
		modelx.ModelTime
	}
)

// TableName GenSource 表名
func (GenSource) TableName() string {
	return "gen_source"
}

func newGenSourceModel(conn sqlx.SqlConn, c cache.CacheConf, gormx *gorm.DB) *defaultGenSourceModel {
	return &defaultGenSourceModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "gen_source",
		gormDB:     gormx,
	}
}

func (m *defaultGenSourceModel) FindOne(ctx context.Context, id interface{}) (*GenSource, error) {
	var resp GenSource
	err := m.gormDB.First(&resp, id).Error
	switch err {
	case nil:
		return &resp, nil
	default:
		if err.Error() == modelx.ErrNotFound.Error() {
			return nil, modelx.ErrNotFound
		}
		return nil, err
	}
}

func (m *defaultGenSourceModel) Insert(ctx context.Context, data *GenSource) (*GenSource, error) {
	err := m.gormDB.Create(data).Error
	//var re sql.Result

	return data, err
}

func (m *defaultGenSourceModel) Update(ctx context.Context, newData *GenSource) (*GenSource, error) {
	_, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return nil, err
	}
	err = m.gormDB.Save(newData).Error
	return newData, err
}

func (m *defaultGenSourceModel) Delete(ctx context.Context, id interface{}) error {
	_, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	err = m.gormDB.Delete(&GenSource{}, id).Error
	return err
}

func (m *defaultGenSourceModel) tableName() string {
	return m.table
}
