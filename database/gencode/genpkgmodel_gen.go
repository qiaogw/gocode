// errCode generated by gocode. DO NOT EDIT!
package gencode

import (
	"context"
	"github.com/qiaogw/gocode/common/modelx"
	"time"

	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"

	"gorm.io/gorm"

	_ "github.com/lib/pq"
)

type (
	genPkgModel interface {
		Insert(ctx context.Context, data *GenPkg) (*GenPkg, error)
		FindOne(ctx context.Context, id interface{}) (*GenPkg, error)
		Update(ctx context.Context, newData *GenPkg) (*GenPkg, error)
		Delete(ctx context.Context, id interface{}) error
	}

	defaultGenPkgModel struct {
		sqlc.CachedConn
		table  string
		gormDB *gorm.DB
	}

	GenPkg struct {
		modelx.BaseModel
		Name      string    `json:"name" comment:"部门名称" gorm:"column:name;size:-5;comment:部门名称;"`
		Label     string    `json:"label" comment:"标题" gorm:"column:label;size:-5;comment:标题;"`
		Sort      int64     `json:"sort" comment:"排序" gorm:"column:sort;size:8;comment:排序;"`
		Remark    string    `json:"remark" comment:"remark" gorm:"column:remark;size:-5;comment:remark;"`
		BeginTime time.Time `json:"beginTime" comment:"" gorm:"column:begin_time;size:8;comment:;"`
		Price     float64   `json:"price" comment:"价格" gorm:"column:price;size:8;comment:价格;"`
		modelx.ControlBy
		modelx.ModelTime
	}
)

// TableName GenPkg 表名
func (GenPkg) TableName() string {
	return "gen_pkg"
}

func newGenPkgModel(conn sqlx.SqlConn, c cache.CacheConf, gormx *gorm.DB) *defaultGenPkgModel {
	_ = gormx.AutoMigrate(&GenPkg{})
	return &defaultGenPkgModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "gen_pkg",
		gormDB:     gormx,
	}
}

func (m *defaultGenPkgModel) FindOne(ctx context.Context, id interface{}) (*GenPkg, error) {
	var resp GenPkg
	err := m.gormDB.First(&resp, id).Error
	switch err {
	case nil:
		return &resp, nil
	default:
		if err.Error() == modelx.ErrNotFound.Error() {
			return nil, modelx.ErrNotFound
		}
		return nil, err
	}
}

func (m *defaultGenPkgModel) Insert(ctx context.Context, data *GenPkg) (*GenPkg, error) {
	err := m.gormDB.Create(data).Error
	//var re sql.Result

	return data, err
}

func (m *defaultGenPkgModel) Update(ctx context.Context, newData *GenPkg) (*GenPkg, error) {
	_, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return nil, err
	}
	err = m.gormDB.Save(newData).Error
	return newData, err
}

func (m *defaultGenPkgModel) Delete(ctx context.Context, id interface{}) error {
	_, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	err = m.gormDB.Delete(&GenPkg{}, id).Error
	return err
}

func (m *defaultGenPkgModel) tableName() string {
	return m.table
}
