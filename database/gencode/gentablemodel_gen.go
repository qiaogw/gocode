// errCode generated by gocode. DO NOT EDIT!
package gencode

import (
	"context"
	"github.com/qiaogw/gocode/common/modelx"

	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"

	"gorm.io/gorm"

	_ "github.com/lib/pq"
)

type (
	genTableModel interface {
		Insert(ctx context.Context, data *GenTable) (*GenTable, error)
		FindOne(ctx context.Context, id interface{}) (*GenTable, error)
		Update(ctx context.Context, newData *GenTable) (*GenTable, error)
		Delete(ctx context.Context, id interface{}) error
	}

	defaultGenTableModel struct {
		sqlc.CachedConn
		table  string
		gormDB *gorm.DB
	}

	GenTable struct {
		modelx.BaseModel
		Db           string     `json:"db" form:"db" db:"db" gorm:"column:db;size:256;comment:小写服务名称;"`
		Table        string     `json:"table" form:"table" db:"table" gorm:"column:table;size:256;comment:表首字母大写驼峰;"`
		Name         string     `json:"name" form:"name" db:"name" gorm:"column:name;size:256;comment:名称;"`
		PackageName  string     `json:"packageName" form:"packageName" db:"package_name" gorm:"column:package_name;size:255;comment:包名;"`
		TableUrl     string     `json:"tableUrl" form:"tableUrl" db:"table_url" gorm:"column:table_url;size:256;comment:表全小写;"`
		HasTimer     bool       `json:"hasTimer" form:"hasTimer" db:"has_timer" gorm:"column:has_timer;size:1;comment:存在时间;"`
		HasCacheKey  bool       `json:"hasCacheKey" form:"hasCacheKey" db:"has_cache_key" gorm:"column:has_cache_key;size:1;comment:存在非主键的唯一键;"`
		NeedValid    bool       `json:"needValid" form:"needValid" db:"need_valid" gorm:"column:need_valid;size:1;comment:需要验证;"`
		PostgreSql   bool       `json:"postgreSql" form:"postgreSql" db:"postgre_sql" gorm:"column:postgre_sql;size:1;comment:PostgreSql;"`
		TableComment string     `json:"tableComment" form:"tableComment" db:"table_comment" gorm:"column:table_comment;size:255;comment:中文名;"`
		Author       string     `json:"author" form:"author" db:"author" gorm:"column:author;size:255;comment:作者;"`
		Email        string     `json:"email" form:"email" db:"email" gorm:"column:email;size:255;comment:作者邮箱;"`
		Pkg          string     `json:"pkg" form:"pkg" db:"pkg" gorm:"column:pkg;size:256;comment:根目录;"`
		Service      string     `json:"service" form:"service" db:"service" gorm:"column:service;size:256;comment:模块首字母大写驼峰;"`
		ParentPkg    string     `json:"parentPkg" form:"parentPkg" db:"parent_pkg" gorm:"column:parent_pkg;size:255;comment:项目路径;"`
		IsCurd       bool       `json:"isCurd" form:"isCurd" db:"is_curd" gorm:"column:is_curd;size:1;comment:开启crud;"`
		IsDataScope  bool       `json:"isDataScope" form:"isDataScope" db:"is_data_scope" gorm:"column:is_data_scope;size:1;comment:开启数据权限;"`
		IsAuth       bool       `json:"isAuth" form:"isAuth" db:"is_auth" gorm:"column:is_auth;size:1;comment:开启用户认证;"`
		IsImport     bool       `json:"isImport"  gorm:"column:is_import;size:1;comment:是否开启导入;"`
		Remark       string     `json:"remark" form:"remark" db:"remark" gorm:"column:remark;size:256;comment:备注;"`
		Columns      []*Column  `json:"columns" gorm:"foreignKey:TableId"`
		Source       *GenSource `json:"source"`
		SourceId     int64      `json:"sourceId" gorm:"column:source_id;size:4;comment:数据源_主键;"`
		modelx.ControlBy
		modelx.ModelTime
	}
)

// TableName GenTable 表名
func (GenTable) TableName() string {
	return "gen_table"
}

func newGenTableModel(conn sqlx.SqlConn, c cache.CacheConf, gormx *gorm.DB) *defaultGenTableModel {
	return &defaultGenTableModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "gen_table",
		gormDB:     gormx,
	}
}

func (m *defaultGenTableModel) FindOne(ctx context.Context, id interface{}) (*GenTable, error) {
	var resp GenTable
	err := m.gormDB.Preload("Columns", func(db *gorm.DB) *gorm.DB {
		return db.Order("id")
	}).First(&resp, id).Error
	switch err {
	case nil:
		return &resp, nil
	default:
		if err.Error() == modelx.ErrNotFound.Error() {
			return nil, modelx.ErrNotFound
		}
		return nil, err
	}
}

func (m *defaultGenTableModel) Insert(ctx context.Context, data *GenTable) (*GenTable, error) {
	err := m.gormDB.Create(data).Error
	//var re sql.Result

	return data, err
}

func (m *defaultGenTableModel) Update(ctx context.Context, newData *GenTable) (*GenTable, error) {
	_, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return nil, err
	}
	err = m.gormDB.Save(newData).Error
	return newData, err
}

func (m *defaultGenTableModel) Delete(ctx context.Context, id interface{}) error {
	_, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	err = m.gormDB.Delete(&GenTable{}, id).Error
	return err
}

func (m *defaultGenTableModel) tableName() string {
	return m.table
}
