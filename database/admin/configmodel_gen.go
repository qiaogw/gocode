// errCode generated by gocode. DO NOT EDIT!
package admin

import (
	"context"
	"github.com/qiaogw/gocode/common/modelx"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"gorm.io/gorm"

	_ "github.com/lib/pq"
)

type (
	configModel interface {
		Insert(ctx context.Context, data *Config) (*Config, error)
		FindOne(ctx context.Context, id interface{}) (*Config, error)
		Update(ctx context.Context, newData *Config) error
		Delete(ctx context.Context, id interface{}) error
	}

	defaultConfigModel struct {
		sqlc.CachedConn
		table  string
		gormDB *gorm.DB
	}

	Config struct {
		modelx.BaseModel
		ConfigName  string `json:"configName" form:"configName" db:"config_name" gorm:"column:config_name;comment:配置名称;"`
		ConfigKey   string `json:"configKey" form:"configKey" db:"config_key" gorm:"column:config_key;comment:配置代码;"`
		ConfigValue string `json:"configValue" form:"configValue" db:"config_value" gorm:"column:config_value;comment:配置值;"`
		ConfigType  string `json:"configType" form:"configType" db:"config_type" gorm:"column:config_type;comment:配置类型;"`
		IsFrontend  string `json:"isFrontend" form:"isFrontend" db:"is_frontend" gorm:"column:is_frontend;comment:是否前台;"`
		Remark      string `json:"remark" form:"remark" db:"remark" gorm:"column:remark;comment:Remark;"`
		modelx.ControlBy
		modelx.ModelTime
	}
)

// TableName Config 表名
func (Config) TableName() string {
	return "admin_config"
}

func newConfigModel(conn sqlx.SqlConn, c cache.CacheConf, gormx *gorm.DB) *defaultConfigModel {
	return &defaultConfigModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "admin_config",
		gormDB:     gormx,
	}
}

func (m *defaultConfigModel) FindOne(ctx context.Context, id interface{}) (*Config, error) {
	var resp Config
	err := m.gormDB.First(&resp, id).Error
	switch err {
	case nil:
		return &resp, nil
	default:
		if err.Error() == modelx.ErrNotFound.Error() {
			return nil, modelx.ErrNotFound
		}
		return nil, err
	}
}

func (m *defaultConfigModel) Insert(ctx context.Context, data *Config) (*Config, error) {
	err := m.gormDB.Create(data).Error
	//var re sql.Result

	return data, err
}

func (m *defaultConfigModel) Update(ctx context.Context, newData *Config) error {
	_, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}
	err = m.gormDB.Save(newData).Error
	return err
}

func (m *defaultConfigModel) Delete(ctx context.Context, id interface{}) error {
	_, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	err = m.gormDB.Delete(&Config{}, id).Error
	return err
}

func (m *defaultConfigModel) tableName() string {
	return m.table
}
