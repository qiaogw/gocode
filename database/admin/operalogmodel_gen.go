// errCode generated by gocode. DO NOT EDIT!
package admin

import (
	"context"
	_ "github.com/lib/pq"
	"github.com/qiaogw/gocode/common/modelx"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"gorm.io/gorm"
	"time"
)

type (
	operaLogModel interface {
		Insert(ctx context.Context, data *OperaLog) (*OperaLog, error)
		FindOne(ctx context.Context, id interface{}) (*OperaLog, error)
		Update(ctx context.Context, newData *OperaLog) error
		Delete(ctx context.Context, id interface{}) error
	}

	defaultOperaLogModel struct {
		sqlc.CachedConn
		table  string
		gormDB *gorm.DB
	}

	OperaLog struct {
		modelx.BaseModel
		Title         string    `json:"title" form:"title" db:"title" gorm:"column:title;comment:操作模块;"`
		BusinessType  string    `json:"businessType" form:"businessType" db:"business_type" gorm:"column:business_type;comment:操作类型;"`
		BusinessTypes string    `json:"businessTypes" form:"businessTypes" db:"business_types" gorm:"column:business_types;comment:BusinessTypes;"`
		Method        string    `json:"method" form:"method" db:"method" gorm:"column:method;comment:函数;"`
		RequestMethod string    `json:"requestMethod" form:"requestMethod" db:"request_method" gorm:"column:request_method;comment:请求方式;"`
		OperatorType  string    `json:"operatorType" form:"operatorType" db:"operator_type" gorm:"column:operator_type;comment:operator_type;"`
		OperName      string    `json:"operName" form:"operName" db:"oper_name" gorm:"column:oper_name;comment:操作者;"`
		DeptName      string    `json:"deptName" form:"deptName" db:"dept_name" gorm:"column:dept_name;comment:部门名称;"`
		OperUrl       string    `json:"operUrl" form:"operUrl" db:"oper_url" gorm:"column:oper_url;comment:访问地址;"`
		OperIp        string    `json:"operIp" form:"operIp" db:"oper_ip" gorm:"column:oper_ip;comment:客户端ip;"`
		OperLocation  string    `json:"operLocation" form:"operLocation" db:"oper_location" gorm:"column:oper_location;comment:访问位置;"`
		OperParam     string    `json:"operParam" form:"operParam" db:"oper_param" gorm:"column:oper_param;comment:请求参数;"`
		Status        string    `json:"status" form:"status" db:"status" gorm:"column:status;comment:操作状态;"`
		OperTime      time.Time `json:"operTime" form:"operTime" db:"oper_time" gorm:"column:oper_time;comment:操作时间;"`
		JsonResult    string    `json:"jsonResult" form:"jsonResult" db:"json_result" gorm:"column:json_result;comment:返回数据;"`
		Remark        string    `json:"remark" form:"remark" db:"remark" gorm:"column:remark;comment:备注;"`
		LatencyTime   string    `json:"latencyTime" form:"latencyTime" db:"latency_time" gorm:"column:latency_time;comment:耗时;"`
		UserAgent     string    `json:"userAgent" form:"userAgent" db:"user_agent" gorm:"column:user_agent;comment:ua;"`
		modelx.ControlBy
		modelx.ModelTime
	}
)

// TableName OperaLog 表名
func (OperaLog) TableName() string {
	return "admin_opera_log"
}

func newOperaLogModel(conn sqlx.SqlConn, c cache.CacheConf, gormx *gorm.DB) *defaultOperaLogModel {
	return &defaultOperaLogModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "admin_opera_log",
		gormDB:     gormx,
	}
}

func (m *defaultOperaLogModel) FindOne(ctx context.Context, id interface{}) (*OperaLog, error) {
	var resp OperaLog
	err := m.gormDB.First(&resp, id).Error
	switch err {
	case nil:
		return &resp, nil
	default:
		if err.Error() == modelx.ErrNotFound.Error() {
			return nil, modelx.ErrNotFound
		}
		return nil, err
	}
}

func (m *defaultOperaLogModel) Insert(ctx context.Context, data *OperaLog) (*OperaLog, error) {
	err := m.gormDB.Create(data).Error
	//var re sql.Result

	return data, err
}

func (m *defaultOperaLogModel) Update(ctx context.Context, newData *OperaLog) error {
	_, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}
	err = m.gormDB.Save(newData).Error
	return err
}

func (m *defaultOperaLogModel) Delete(ctx context.Context, id interface{}) error {
	_, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	err = m.gormDB.Delete(&OperaLog{}, id).Error
	return err
}

func (m *defaultOperaLogModel) tableName() string {
	return m.table
}
