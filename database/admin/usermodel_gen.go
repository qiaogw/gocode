// errCode generated by gocode. DO NOT EDIT!
package admin

import (
	"context"
	"github.com/qiaogw/gocode/common/modelx"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"

	"gorm.io/gorm"

	_ "github.com/lib/pq"
)

type (
	userModel interface {
		Insert(ctx context.Context, data *User) (*User, error)
		FindOne(ctx context.Context, id interface{}) (*User, error)
		Update(ctx context.Context, newData *User) error
		Delete(ctx context.Context, id interface{}) error
	}

	defaultUserModel struct {
		sqlc.CachedConn
		table  string
		gormDB *gorm.DB
	}

	User struct {
		modelx.BaseModel
		DeptId      int64   `json:"deptId" form:"deptId" db:"dept_id" gorm:"column:dept_id;comment:部门_主键;"`
		PostId      int64   `json:"postId" form:"postId" db:"post_id" gorm:"column:post_id;comment:职务_主键;"`
		Uuid        string  `json:"uuid" form:"uuid" db:"uuid" gorm:"column:uuid;comment:uuid;"`
		Username    string  `json:"username" form:"username" db:"username" gorm:"column:username;comment:用户名;"`
		Password    string  `json:"password" form:"password" db:"password" gorm:"column:password;comment:密码;"`
		NickName    string  `json:"nickName" form:"nickName" db:"nick_name" gorm:"column:nick_name;comment:昵称;"`
		Mobile      string  `json:"mobile" form:"mobile" db:"mobile" gorm:"column:mobile;comment:手机号;"`
		Avatar      string  `json:"avatar" form:"avatar" db:"avatar" gorm:"column:avatar;comment:头像;"`
		Gender      string  `json:"gender" form:"gender" db:"gender" gorm:"column:gender;comment:性别;"`
		Email       string  `json:"email" form:"email" db:"email" gorm:"column:email;comment:邮箱;"`
		Sort        int64   `json:"sort" form:"sort" db:"sort" gorm:"column:sort;comment:排序;"`
		Remark      string  `json:"remark" form:"remark" db:"remark" gorm:"column:remark;comment:备注;"`
		Status      string  `json:"status" form:"status" db:"status" gorm:"column:status;comment:状态;"`
		SideMode    string  `json:"sideMode" gorm:"default:dark;comment:用户侧边主题"` // 用户侧边主题
		BaseColor   string  `json:"baseColor" gorm:"default:#fff;comment:基础颜色"`
		ActiveColor string  `json:"activeColor" gorm:"default:#1890ff;comment:活跃颜色"`
		Roles       []*Role `json:"roles" db:"-" gorm:"many2many:admin_user_role;"`
		RoleId      int64   `json:"role_id" gorm:"column:role_id;comment:用户默认角色"` // 用户侧边主题
		Dept        *Dept   `json:"dept" db:"-"`
		Post        *Post   `json:"post" db:"-"`
		modelx.ControlBy
		modelx.ModelTime
	}
)

// TableName User 表名
func (User) TableName() string {
	return "admin_user"
}

func newUserModel(conn sqlx.SqlConn, c cache.CacheConf, gormx *gorm.DB) *defaultUserModel {
	_ = gormx.AutoMigrate(&User{})
	return &defaultUserModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "admin_user",
		gormDB:     gormx,
	}
}

func (m *defaultUserModel) FindOne(ctx context.Context, id interface{}) (*User, error) {
	var resp User
	err := m.gormDB.Preload("Roles").Preload("Post").
		Preload("Dept").First(&resp, id).Error
	switch err {
	case nil:
		return &resp, nil
	default:
		if err.Error() == modelx.ErrNotFound.Error() {
			return nil, modelx.ErrNotFound
		}
		return nil, err
	}
}

func (m *defaultUserModel) Insert(ctx context.Context, data *User) (*User, error) {
	err := m.gormDB.Create(data).Error
	//var re sql.Result

	return data, err
}

func (m *defaultUserModel) Update(ctx context.Context, newData *User) error {
	_, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}
	err = m.gormDB.Save(newData).Error
	return err
}

func (m *defaultUserModel) Delete(ctx context.Context, id interface{}) error {
	_, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	err = m.gormDB.Delete(&User{}, id).Error
	return err
}

func (m *defaultUserModel) tableName() string {
	return m.table
}
