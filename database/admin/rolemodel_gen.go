// errCode generated by gocode. DO NOT EDIT!
package admin

import (
	"context"
	"github.com/qiaogw/gocode/common/modelx"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"

	"gorm.io/gorm"

	_ "github.com/lib/pq"
)

type (
	roleModel interface {
		Insert(ctx context.Context, data *Role) (*Role, error)
		FindOne(ctx context.Context, id interface{}) (*Role, error)
		Update(ctx context.Context, newData *Role) error
		Delete(ctx context.Context, id interface{}) error
		FindOneByName(ctx context.Context, name string) (*Role, error)
		FindOneDetail(ctx context.Context, id interface{}) (*Role, error)
		AddUsers(ctx context.Context, newData *Role) error
	}

	defaultRoleModel struct {
		sqlc.CachedConn
		table  string
		gormDB *gorm.DB
	}

	Role struct {
		modelx.BaseModel
		Name         string  `json:"name" form:"name" db:"name" gorm:"column:name;comment:角色名称;"`
		Code         string  `json:"code" form:"code" db:"code" gorm:"column:code;comment:角色代码;"`
		Sort         int64   `json:"sort" form:"sort" db:"sort" gorm:"column:sort;comment:排序;"`
		IsAdmin      bool    `json:"isAdmin" form:"isAdmin" db:"is_admin" gorm:"column:is_admin;comment:是否admin;"`
		DataScope    string  `json:"dataScope" form:"dataScope" db:"data_scope" gorm:"column:data_scope;comment:数据范围;"`
		DataFilter   string  `json:"dataFilter" form:"dataFilter" db:"data_filter" gorm:"column:data_filter;comment:自定义过滤条件;"`
		DefaultRoute string  `json:"defaultRoute" form:"defaultRoute" db:"default_route" gorm:"column:default_route;comment:默认路由;"`
		Remark       string  `json:"remark" form:"remark" db:"remark" gorm:"column:remark;comment:备注;"`
		Users        []*User `json:"users" db:"-" gorm:"many2many:admin_user_role;"`
		Menus        []*Menu `json:"menus" db:"-" gorm:"many2many:admin_role_menu;"`
		Apis         []*Api  `json:"apis" db:"-" gorm:"many2many:admin_role_api;"`
		modelx.ControlBy
		modelx.ModelTime
	}
)

// TableName Role 表名
func (Role) TableName() string {
	return "admin_role"
}

func newRoleModel(conn sqlx.SqlConn, c cache.CacheConf, gormx *gorm.DB) *defaultRoleModel {
	return &defaultRoleModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "admin_role",
		gormDB:     gormx,
	}
}

func (m *defaultRoleModel) FindOne(ctx context.Context, id interface{}) (*Role, error) {
	var resp Role
	err := m.gormDB.First(&resp, id).Error
	switch err {
	case nil:
		return &resp, nil
	default:
		if err.Error() == modelx.ErrNotFound.Error() {
			return nil, modelx.ErrNotFound
		}
		return nil, err
	}
}

func (m *defaultRoleModel) FindOneDetail(ctx context.Context, id interface{}) (*Role, error) {
	var resp Role
	err := m.gormDB.Preload("Menus").
		Preload("Apis").
		Preload("Users").First(&resp, id).Error
	switch err {
	case nil:
		return &resp, nil
	default:
		if err.Error() == modelx.ErrNotFound.Error() {
			return nil, modelx.ErrNotFound
		}
		return nil, err
	}
}
func (m *defaultRoleModel) FindOneByName(ctx context.Context, name string) (*Role, error) {
	var resp Role
	err := m.gormDB.Where("name = ?", name).First(&resp).Error
	switch err {
	case nil:
		return &resp, nil
	default:
		if err.Error() == modelx.ErrNotFound.Error() {
			return nil, modelx.ErrNotFound
		}
		return nil, err
	}
}

func (m *defaultRoleModel) Insert(ctx context.Context, data *Role) (*Role, error) {
	err := m.gormDB.Create(data).Error
	//var re sql.Result

	return data, err
}

func (m *defaultRoleModel) Update(ctx context.Context, newData *Role) error {
	_, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}
	err = m.gormDB.Save(newData).Error
	return err
}

func (m *defaultRoleModel) AddUsers(ctx context.Context, newData *Role) error {
	_, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}
	m.gormDB.Model(newData).Association("Users").Replace(newData.Users)
	//err = m.gormDB.Save(newData).Error
	return err
}

func (m *defaultRoleModel) Delete(ctx context.Context, id interface{}) error {
	_, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	err = m.gormDB.Delete(&Role{}, id).Error
	return err
}

func (m *defaultRoleModel) tableName() string {
	return m.table
}
