// Code generated by goctl. DO NOT EDIT.

package model
{{$table:=.Table}}

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	{{ if .HasTimer }}"time"{{ end }}
	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
	{{ if .PostgreSql }}_ "github.com/lib/pq"{{ end}}
)

var (
	{{.Name}}FieldNames = builder.RawFieldNames(&{{.Table}}{}{{if .PostgreSql}}, true{{end}})
	{{.Name}}Rows = strings.Join({{.Name}}FieldNames, ",")
	{{.Name}}RowsExpectAutoSet = {{if .PostgreSql}}strings.Join(stringx.Remove({{.Name}}FieldNames, {{if .autoIncrement}}"{{.originalPrimaryKey}}", {{end}} {{.ignoreColumns}}), ","){{else}}strings.Join(stringx.Remove({{.lowerStartCamelObject}}FieldNames, {{if .autoIncrement}}"{{.originalPrimaryKey}}", {{end}} {{.ignoreColumns}}), ","){{end}}
	{{.Name}}RowsWithPlaceHolder = {{if .PostgreSql}}builder.PostgreSqlJoin(stringx.Remove({{.Name}}FieldNames, "{{.originalPrimaryKey}}", {{.ignoreColumns}})){{else}}strings.Join(stringx.Remove({{.lowerStartCamelObject}}FieldNames, "{{.originalPrimaryKey}}", {{.ignoreColumns}}), "=?,") + "=?"{{end}}

	{{if .withCache}}{{.cacheKeys}}{{end}}
)


type (
	{{.PackageName}}Model interface {
		Insert(ctx context.Context, data *{{.Table}}) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*{{.Table}}, error)
		FindOneByUserIdSn(ctx context.Context, userId sql.NullInt64, sn string) (*{{.Table}}, error)
		Update(ctx context.Context, data *{{.Table}}) error
		Delete(ctx context.Context, id int64) error
	}

	default{{.Table}}Model struct {
		sqlc.CachedConn
		table string
	}

	{{.Table}} struct {
		modelx.BaseModel
        {{- range .Columns }}
			{{- if .IsPk -}}
			{{- else if .IsModelTime }}
			{{- else if .IsControl }}
			{{- else}}
				{{- if .IsPage}}
				{{- else}}
				{{.FieldName}}  {{.DataType}} `json:"{{.FieldJson}}" comment:"{{.ColumnComment}}" {{- if ne .GormName "-" }} gorm:"column:{{.GormName}};{{- if .DataTypeLong -}}size:{{.DataTypeLong}};{{- end -}}comment:{{.ColumnComment}};"{{- end -}}`
				{{- end -}}
			{{- end -}}
        {{- end }}
		modelx.ControlBy
        modelx.ModelTime
	}
)

func new{{.Table}}Model(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *default{{.Table}}Model {
	return &default{{.Table}}Model{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      `"public"."{{.PackageName}}"`,
	}
}

func (m *default{{.Table}}Model) withSession(session sqlx.Session) *default{{.Table}}Model {
	return &default{{.Table}}Model{
		CachedConn: m.CachedConn.WithSession(session),
		table:      `"public"."{{.PackageName}}"`,
	}
}

func (m *default{{.Table}}Model) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	public{{.Table}}IdKey := fmt.Sprintf("%s%v", cachePublic{{.Table}}IdPrefix, id)
	public{{.Table}}UserIdSnKey := fmt.Sprintf("%s%v:%v", cachePublic{{.Table}}UserIdSnPrefix, data.UserId, data.Sn)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where id = $1", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, public{{.Table}}IdKey, public{{.Table}}UserIdSnKey)
	return err
}

func (m *default{{.Table}}Model) FindOne(ctx context.Context, id int64) (*{{.Table}}, error) {
	public{{.Table}}IdKey := fmt.Sprintf("%s%v", cachePublic{{.Table}}IdPrefix, id)
	var resp {{.Table}}
	err := m.QueryRowCtx(ctx, &resp, public{{.Table}}IdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where id = $1 limit 1", {{.PackageName}}Rows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *default{{.Table}}Model) FindOneByUserIdSn(ctx context.Context, userId sql.NullInt64, sn string) (*{{.Table}}, error) {
	public{{.Table}}UserIdSnKey := fmt.Sprintf("%s%v:%v", cachePublic{{.Table}}UserIdSnPrefix, userId, sn)
	var resp {{.Table}}
	err := m.QueryRowIndexCtx(ctx, &resp, public{{.Table}}UserIdSnKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where user_id = $1 and sn = $2 limit 1", {{.PackageName}}Rows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, userId, sn); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

{{- range  .CacheKeys}}
func (m *default{{$table}}Model) FindOneBy{{.Field}}( {{.FieldJson}} {{.DataType}}) (*{{$table}}, error) {
	public{{.Table}}{{.Field}}SnKey := fmt.Sprintf("%s%v:%v", cachePublic{{.Table}}{{.Field}}Prefix, {{.FieldJson}}, sn)
	var resp {{.Table}}
	err := m.QueryRowIndexCtx(ctx, &resp, public{{.Table}}{{.Field}}Key, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where user_id = $1 and sn = $2 limit 1", {{.PackageName}}Rows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, userId, sn); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}
{{- end }}



func (m *default{{.Table}}Model) Insert(ctx context.Context, data *{{.Table}}) (sql.Result, error) {
	public{{.Table}}IdKey := fmt.Sprintf("%s%v", cachePublic{{.Table}}IdPrefix, data.Id)
	public{{.Table}}UserIdSnKey := fmt.Sprintf("%s%v:%v", cachePublic{{.Table}}UserIdSnPrefix, data.UserId, data.Sn)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17)", m.table, {{.PackageName}}RowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.MemberId, data.BundleId, data.Sn, data.UserId, data.Name, data.Price, data.FeeMoney, data.{{.Table}}Money, data.InvoiceState, data.TradeState, data.TradeCode, data.Remark, data.CreateBy, data.UpdateBy, data.CreatedAt, data.UpdatedAt, data.DeletedAt)
	}, public{{.Table}}IdKey, public{{.Table}}UserIdSnKey)
	return ret, err
}

func (m *default{{.Table}}Model) Update(ctx context.Context, newData *{{.Table}}) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	public{{.Table}}IdKey := fmt.Sprintf("%s%v", cachePublic{{.Table}}IdPrefix, data.Id)
	public{{.Table}}UserIdSnKey := fmt.Sprintf("%s%v:%v", cachePublic{{.Table}}UserIdSnPrefix, data.UserId, data.Sn)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where id = $1", m.table, {{.PackageName}}RowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Id, newData.MemberId, newData.BundleId, newData.Sn, newData.UserId, newData.Name, newData.Price, newData.FeeMoney, newData.{{.Table}}Money, newData.InvoiceState, newData.TradeState, newData.TradeCode, newData.Remark, newData.CreateBy, newData.UpdateBy, newData.CreatedAt, newData.UpdatedAt, newData.DeletedAt)
	}, public{{.Table}}IdKey, public{{.Table}}UserIdSnKey)
	return err
}

func (m *default{{.Table}}Model) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cachePublic{{.Table}}IdPrefix, primary)
}

func (m *default{{.Table}}Model) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", {{.PackageName}}Rows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *default{{.Table}}Model) tableName() string {
	return m.table
}
