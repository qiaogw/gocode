// Package model Code generated by gocode. DO NOT EDIT!
package model
{{$table:=.Table}}
import (
	"github.com/qiaogw/gocode/common/modelx"
	"context"
	"fmt"
{{- if .PkIsChar }}
	"github.com/google/uuid"
{{- end }}
    "github.com/zeromicro/go-zero/core/stores/cache"

    "gorm.io/gorm"
	{{ if .HasTimer }}"time"{{ end }}
	{{ if .PostgreSql }}_ "github.com/lib/pq"{{ end}}
)

var cache{{.Service}}{{.Table}}IdPrefix = "cache:{{.Db}}:{{.PackageName}}:id:"

type (
	{{.PackageName}}Model interface {
		Insert(ctx context.Context, data *{{.Table}}) (*{{.Table}}, error)
		FindOne(ctx context.Context, id interface{}) (*{{.Table}}, error)
		Update(ctx context.Context, newData *{{.Table}})  error
		Delete(ctx context.Context, id interface{}) error
	}

	default{{.Table}}Model struct {
		cache.Cache
		table  string
		gormDB *gorm.DB
	}

	{{.Table}} struct {
		{{- if .PkIsChar }}
		modelx.BaseModel
		{{- else }}
		modelx.BaseModelInt
		{{- end }}
		{{- range .Columns }}
			{{- if .IsPk -}}
			{{- else if .IsModelTime }}
			{{- else if .IsControl }}
			{{- else}}
				{{- if .IsPage}}
				{{- else}}
					{{.FieldName}}  {{.DataType}} `json:"{{.FieldJson}}" comment:"{{.ColumnComment}}" {{- if ne .GormName "-" }} gorm:"column:{{.GormName}};type:{{.DbType}};{{- if .DataTypeLong -}}size:{{.DataTypeLong}};{{- end -}}comment:{{.ColumnComment}};"{{- end -}}`
				{{- end -}}
			{{- end -}}
		{{- end }}
		modelx.ControlBy
		modelx.ModelTime
	}
)

{{ if .Table }}
// TableName {{.Table}} 表名
func ({{.Table}}) TableName() string {
  return "{{.Name}}"
}
{{ end }}

func new{{.Table}}Model(c cache.Cache, gormx *gorm.DB) *default{{.Table}}Model {
	_ = gormx.AutoMigrate(&{{.Table}}{})
	return &default{{.Table}}Model{
		Cache: c,
		table:      "{{.Name}}",
		gormDB:     gormx,
	}
}

func (m *default{{.Table}}Model) FindOne(ctx context.Context, id interface{}) (*{{.Table}}, error) {
	public{{.Service}}{{.Table}}IdKey := fmt.Sprintf("%s%v", cache{{.Service}}{{.Table}}IdPrefix, id)
	var resp {{.Table}}

	err := m.GetCtx(ctx, public{{.Service}}{{.Table}}IdKey, &resp)
	if err != nil {
		err := m.gormDB.First(&resp, "id = ?", id).Error
		switch err {
		case nil:
			err = m.SetCtx(ctx, public{{.Service}}{{.Table}}IdKey, resp)
		default:
			if  err.Error()==modelx.ErrNotFound.Error(){
				return nil, modelx.ErrNotFound
			}
			return nil, err
		}
	}
	return &resp, nil
}

func (m *default{{.Table}}Model) Insert(ctx context.Context, data *{{.Table}}) (*{{.Table}}, error) {
{{- if .PkIsChar }}
	newUUID := uuid.New()
	data.Id = newUUID
{{- end }}
	err := m.gormDB.Create(data).Error
	if err != nil {
		return nil,err
	}
	return data, nil
}

func (m *default{{.Table}}Model) Update(ctx context.Context, newData *{{.Table}}) error {
	err := m.gormDB.Save(newData).Error
	if err != nil {
		return err
	}
	public{{.Service}}{{.Table}}IdKey := fmt.Sprintf("%s%v", cache{{.Service}}{{.Table}}IdPrefix, newData.Id)
	_ = m.DelCtx(ctx, public{{.Service}}{{.Table}}IdKey)
	return nil
}

func (m *default{{.Table}}Model) Delete(ctx context.Context, id interface{}) error {
	public{{.Service}}{{.Table}}IdKey := fmt.Sprintf("%s%v", cache{{.Service}}{{.Table}}IdPrefix, id)
	_, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	err = m.gormDB.Delete(&{{.Table}}{}, "id = ?", id).Error
	if err != nil {
		return err
	}
	_ = m.DelCtx(ctx, public{{.Service}}{{.Table}}IdKey)
	return nil
}


func (m *default{{.Table}}Model) tableName() string {
	return m.table
}





