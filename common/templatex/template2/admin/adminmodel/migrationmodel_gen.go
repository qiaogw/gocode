// Package model errCode generated by gocode. DO NOT EDIT!
package adminmodel

import (
	"context"
	"fmt"
	"github.com/google/uuid"
	"github.com/qiaogw/gocode/common/modelx"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"gorm.io/gorm"

	_ "github.com/lib/pq"
)

var cacheAdminMigrationIdPrefix = "cache:admin:migration:id:"

type (
	migrationModel interface {
		Insert(ctx context.Context, data *Migration) (*Migration, error)
		FindOne(ctx context.Context, id interface{}) (*Migration, error)
		Update(ctx context.Context, newData *Migration) error
		Delete(ctx context.Context, id interface{}) error
	}

	defaultMigrationModel struct {
		cache.Cache
		table  string
		gormDB *gorm.DB
	}

	Migration struct {
		modelx.ModelWithCommon
		Version string `json:"version" comment:"版本号" gorm:"column:version;size:191;comment:版本号;"`
	}
)

// TableName Migration 表名
func (Migration) TableName() string {
	return "admin_migration"
}

func newMigrationModel(c cache.Cache, gormx *gorm.DB) *defaultMigrationModel {
	return &defaultMigrationModel{
		Cache:  c,
		table:  "admin_migration",
		gormDB: gormx,
	}
}

func (m *defaultMigrationModel) FindOne(ctx context.Context, id interface{}) (*Migration, error) {
	publicAdminMigrationIdKey := fmt.Sprintf("%s%v", cacheAdminMigrationIdPrefix, id)
	var resp Migration

	err := m.GetCtx(ctx, publicAdminMigrationIdKey, &resp)
	if err != nil {
		err := m.gormDB.First(&resp, "id = ?", id).Error
		switch err {
		case nil:
			err = m.SetCtx(ctx, publicAdminMigrationIdKey, resp)
		default:
			if err.Error() == modelx.ErrNotFound.Error() {
				return nil, modelx.ErrNotFound
			}
			return nil, err
		}
	}
	return &resp, nil
}

func (m *defaultMigrationModel) Insert(ctx context.Context, data *Migration) (*Migration, error) {
	newUUID := uuid.New()
	data.Id = newUUID
	publicAdminMigrationIdKey := fmt.Sprintf("%s%v", cacheAdminMigrationIdPrefix, data.Id)
	err := m.gormDB.Create(data).Error
	if err != nil {
		return nil, err
	}
	_ = m.DelCtx(ctx, publicAdminMigrationIdKey)
	return data, nil
}

func (m *defaultMigrationModel) Update(ctx context.Context, newData *Migration) error {
	err := m.gormDB.Save(newData).Error
	if err != nil {
		return err
	}
	publicAdminMigrationIdKey := fmt.Sprintf("%s%v", cacheAdminMigrationIdPrefix, newData.Id)
	_ = m.DelCtx(ctx, publicAdminMigrationIdKey)
	return nil
}

func (m *defaultMigrationModel) Delete(ctx context.Context, id interface{}) error {
	publicAdminMigrationIdKey := fmt.Sprintf("%s%v", cacheAdminMigrationIdPrefix, id)
	_, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	err = m.gormDB.Delete(&Migration{}, "id = ?", id).Error
	if err != nil {
		return err
	}
	_ = m.DelCtx(ctx, publicAdminMigrationIdKey)
	return nil
}

func (m *defaultMigrationModel) tableName() string {
	return m.table
}
