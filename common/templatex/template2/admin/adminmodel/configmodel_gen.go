// Package model errCode generated by gocode. DO NOT EDIT!
package adminmodel

import (
	"context"
	"fmt"
	"github.com/google/uuid"
	"github.com/qiaogw/gocode/common/modelx"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"gorm.io/gorm"

	_ "github.com/lib/pq"
)

var cacheAdminConfigIdPrefix = "cache:admin:config:id:"

type (
	configModel interface {
		Insert(ctx context.Context, data *Config) (*Config, error)
		FindOne(ctx context.Context, id interface{}) (*Config, error)
		Update(ctx context.Context, newData *Config) error
		Delete(ctx context.Context, id interface{}) error
	}

	defaultConfigModel struct {
		cache.Cache
		table  string
		gormDB *gorm.DB
	}

	Config struct {
		modelx.ModelWithCommon
		ConfigName  string `json:"configName" comment:"配置名称" gorm:"column:config_name;size:128;comment:配置名称;"`
		ConfigKey   string `json:"configKey" comment:"配置代码" gorm:"column:config_key;size:128;comment:配置代码;"`
		ConfigValue string `json:"configValue" comment:"配置值" gorm:"column:config_value;size:255;comment:配置值;"`
		ConfigType  string `json:"configType" comment:"配置类型" gorm:"column:config_type;size:64;comment:配置类型;"`
		IsFrontend  string `json:"isFrontend" comment:"是否前台" gorm:"column:is_frontend;size:64;comment:是否前台;"`
	}
)

// TableName Config 表名
func (Config) TableName() string {
	return "admin_config"
}

func newConfigModel(c cache.Cache, gormx *gorm.DB) *defaultConfigModel {
	return &defaultConfigModel{
		Cache:  c,
		table:  "admin_config",
		gormDB: gormx,
	}
}

func (m *defaultConfigModel) FindOne(ctx context.Context, id interface{}) (*Config, error) {
	publicAdminConfigIdKey := fmt.Sprintf("%s%v", cacheAdminConfigIdPrefix, id)
	var resp Config

	err := m.GetCtx(ctx, publicAdminConfigIdKey, &resp)
	if err != nil {
		err := m.gormDB.First(&resp, "id = ?", id).Error
		switch err {
		case nil:
			err = m.SetCtx(ctx, publicAdminConfigIdKey, resp)
		default:
			if err.Error() == modelx.ErrNotFound.Error() {
				return nil, modelx.ErrNotFound
			}
			return nil, err
		}
	}
	return &resp, nil
}

func (m *defaultConfigModel) Insert(ctx context.Context, data *Config) (*Config, error) {
	newUUID := uuid.New()
	data.Id = newUUID
	publicAdminConfigIdKey := fmt.Sprintf("%s%v", cacheAdminConfigIdPrefix, data.Id)
	err := m.gormDB.Create(data).Error
	if err != nil {
		return nil, err
	}
	_ = m.DelCtx(ctx, publicAdminConfigIdKey)
	return data, nil
}

func (m *defaultConfigModel) Update(ctx context.Context, newData *Config) error {
	err := m.gormDB.Save(newData).Error
	if err != nil {
		return err
	}
	publicAdminConfigIdKey := fmt.Sprintf("%s%v", cacheAdminConfigIdPrefix, newData.Id)
	_ = m.DelCtx(ctx, publicAdminConfigIdKey)
	return nil
}

func (m *defaultConfigModel) Delete(ctx context.Context, id interface{}) error {
	publicAdminConfigIdKey := fmt.Sprintf("%s%v", cacheAdminConfigIdPrefix, id)
	_, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	err = m.gormDB.Delete(&Config{}, "id = ?", id).Error
	if err != nil {
		return err
	}
	_ = m.DelCtx(ctx, publicAdminConfigIdKey)
	return nil
}

func (m *defaultConfigModel) tableName() string {
	return m.table
}
