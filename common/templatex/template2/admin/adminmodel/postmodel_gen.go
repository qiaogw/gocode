// Package model errCode generated by gocode. DO NOT EDIT!
package adminmodel

import (
	"context"
	"fmt"
	"github.com/google/uuid"
	"github.com/qiaogw/gocode/common/modelx"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"gorm.io/gorm"

	_ "github.com/lib/pq"
)

var cacheAdminPostIdPrefix = "cache:admin:post:id:"

type (
	postModel interface {
		Insert(ctx context.Context, data *Post) (*Post, error)
		FindOne(ctx context.Context, id interface{}) (*Post, error)
		Update(ctx context.Context, newData *Post) error
		Delete(ctx context.Context, id interface{}) error
	}

	defaultPostModel struct {
		cache.Cache
		table  string
		gormDB *gorm.DB
	}

	Post struct {
		modelx.ModelWithCommon
		Name string `json:"name" comment:"名称" gorm:"column:name;size:256;comment:名称;"`
		Code string `json:"code" comment:"职务代码" gorm:"column:code;size:128;comment:职务代码;"`

		Users []*User `json:"users" db:"-"`
	}
)

// TableName Post 表名
func (Post) TableName() string {
	return "admin_post"
}

func newPostModel(c cache.Cache, gormx *gorm.DB) *defaultPostModel {
	return &defaultPostModel{
		Cache:  c,
		table:  "admin_post",
		gormDB: gormx,
	}
}

func (m *defaultPostModel) FindOne(ctx context.Context, id interface{}) (*Post, error) {
	publicAdminPostIdKey := fmt.Sprintf("%s%v", cacheAdminPostIdPrefix, id)
	var resp Post

	err := m.GetCtx(ctx, publicAdminPostIdKey, &resp)
	if err != nil {
		err := m.gormDB.First(&resp, "id = ?", id).Error
		switch err {
		case nil:
			err = m.SetCtx(ctx, publicAdminPostIdKey, resp)
		default:
			if err.Error() == modelx.ErrNotFound.Error() {
				return nil, modelx.ErrNotFound
			}
			return nil, err
		}
	}
	return &resp, nil
}

func (m *defaultPostModel) Insert(ctx context.Context, data *Post) (*Post, error) {
	newUUID := uuid.New()
	data.Id = newUUID
	publicAdminPostIdKey := fmt.Sprintf("%s%v", cacheAdminPostIdPrefix, data.Id)
	err := m.gormDB.Create(data).Error
	if err != nil {
		return nil, err
	}
	_ = m.DelCtx(ctx, publicAdminPostIdKey)
	return data, nil
}

func (m *defaultPostModel) Update(ctx context.Context, newData *Post) error {
	err := m.gormDB.Save(newData).Error
	if err != nil {
		return err
	}
	publicAdminPostIdKey := fmt.Sprintf("%s%v", cacheAdminPostIdPrefix, newData.Id)
	_ = m.DelCtx(ctx, publicAdminPostIdKey)
	return nil
}

func (m *defaultPostModel) Delete(ctx context.Context, id interface{}) error {
	publicAdminPostIdKey := fmt.Sprintf("%s%v", cacheAdminPostIdPrefix, id)
	_, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	err = m.gormDB.Delete(&Post{}, "id = ?", id).Error
	if err != nil {
		return err
	}
	_ = m.DelCtx(ctx, publicAdminPostIdKey)
	return nil
}

func (m *defaultPostModel) tableName() string {
	return m.table
}
