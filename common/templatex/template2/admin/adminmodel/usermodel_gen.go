// Package model errCode generated by gocode. DO NOT EDIT!
package adminmodel

import (
	"context"
	"fmt"
	"github.com/google/uuid"
	"github.com/qiaogw/gocode/common/modelx"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"gorm.io/gorm"

	_ "github.com/lib/pq"
)

var cacheAdminUserIdPrefix = "cache:admin:user:id:"

type (
	userModel interface {
		Insert(ctx context.Context, data *User) (*User, error)
		FindOne(ctx context.Context, id interface{}) (*User, error)
		Update(ctx context.Context, newData *User) error
		Delete(ctx context.Context, id interface{}) error
	}

	defaultUserModel struct {
		cache.Cache
		table  string
		gormDB *gorm.DB
	}

	User struct {
		modelx.ModelWithCommon
		PostId      string `json:"postId" comment:"职务_主键" gorm:"column:post_id;size:256;comment:职务_主键;"`
		DeptId      string `json:"deptId" comment:"部门_主键" gorm:"column:dept_id;size:256;comment:部门_主键;"`
		Uuid        string `json:"uuid" comment:"uuid" gorm:"column:uuid;size:256;comment:uuid;"`
		Username    string `json:"username" comment:"用户名" gorm:"column:username;size:128;comment:用户名;"`
		Password    string `json:"password" comment:"密码" gorm:"column:password;size:256;comment:密码;"`
		NickName    string `json:"nickName" comment:"昵称" gorm:"column:nick_name;size:256;comment:昵称;"`
		RealName    string `json:"realName" comment:"真实姓名" gorm:"column:real_name;size:64;comment:真实姓名;"`
		Mobile      string `json:"mobile" comment:"手机号" gorm:"column:mobile;size:256;comment:手机号;"`
		Avatar      string `json:"avatar" comment:"头像" gorm:"column:avatar;size:255;comment:头像;"`
		Gender      string `json:"gender" comment:"性别" gorm:"column:gender;size:255;comment:性别;"`
		Email       string `json:"email" comment:"email" gorm:"column:email;size:256;comment:email;"`
		SideMode    string `json:"sideMode" comment:"用户侧边主题" gorm:"column:side_mode;size:256;comment:用户侧边主题;"`
		BaseColor   string `json:"baseColor" comment:"基础颜色" gorm:"column:base_color;size:256;comment:基础颜色;"`
		RoleId      string `json:"roleId" comment:"用户默认角色" gorm:"column:role_id;size:256;comment:用户默认角色;"`
		ActiveColor string `json:"activeColor" comment:"活跃颜色" gorm:"column:active_color;size:256;comment:活跃颜色;"`
		Status      string `json:"status" comment:"状态" gorm:"column:status;size:4;comment:状态;"`

		Roles []*Role `json:"roles" db:"-" gorm:"many2many:admin_user_role;"`
		Dept  *Dept   `json:"dept" db:"-"`
		Post  *Post   `json:"post" db:"-"`
	}
)

// TableName User 表名
func (User) TableName() string {
	return "admin_user"
}

func newUserModel(c cache.Cache, gormx *gorm.DB) *defaultUserModel {
	_ = gormx.AutoMigrate(&User{})
	return &defaultUserModel{
		Cache:  c,
		table:  "admin_user",
		gormDB: gormx,
	}
}

func (m *defaultUserModel) FindOne(ctx context.Context, id interface{}) (*User, error) {
	publicAdminUserIdKey := fmt.Sprintf("%s%v", cacheAdminUserIdPrefix, id)
	var resp User

	err := m.GetCtx(ctx, publicAdminUserIdKey, &resp)
	if err != nil {
		err = m.gormDB.Preload("Roles").Preload("Post").
			Preload("Dept").Where("id = ?", id).First(&resp).Error
		switch err {
		case nil:
			err = m.SetCtx(ctx, publicAdminUserIdKey, resp)
		default:
			if err.Error() == modelx.ErrNotFound.Error() {
				return nil, modelx.ErrNotFound
			}
			return nil, err
		}
	}
	return &resp, nil
}

func (m *defaultUserModel) Insert(ctx context.Context, data *User) (*User, error) {
	newUUID := uuid.New()
	data.Id = newUUID
	publicAdminUserIdKey := fmt.Sprintf("%s%v", cacheAdminUserIdPrefix, data.Id)
	err := m.gormDB.Create(data).Error
	if err != nil {
		return nil, err
	}
	_ = m.DelCtx(ctx, publicAdminUserIdKey)
	return data, nil
}

func (m *defaultUserModel) Update(ctx context.Context, newData *User) error {
	err := m.gormDB.Save(newData).Error
	if err != nil {
		return err
	}
	publicAdminUserIdKey := fmt.Sprintf("%s%v", cacheAdminUserIdPrefix, newData.Id)
	_ = m.DelCtx(ctx, publicAdminUserIdKey)
	return nil
}

func (m *defaultUserModel) Delete(ctx context.Context, id interface{}) error {
	publicAdminUserIdKey := fmt.Sprintf("%s%v", cacheAdminUserIdPrefix, id)
	_, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	err = m.gormDB.Delete(&User{}, "id = ?", id).Error
	if err != nil {
		return err
	}
	_ = m.DelCtx(ctx, publicAdminUserIdKey)
	return nil
}

func (m *defaultUserModel) tableName() string {
	return m.table
}
