// Package model errCode generated by gocode. DO NOT EDIT!
package adminmodel

import (
	"context"
	"fmt"
	"github.com/google/uuid"
	"github.com/qiaogw/gocode/common/modelx"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"gorm.io/gorm"

	_ "github.com/lib/pq"
)

var cacheAdminDictDataIdPrefix = "cache:admin:dictData:id:"

type (
	dictDataModel interface {
		Insert(ctx context.Context, data *DictData) (*DictData, error)
		FindOne(ctx context.Context, id interface{}) (*DictData, error)
		Update(ctx context.Context, newData *DictData) error
		Delete(ctx context.Context, id interface{}) error
	}

	defaultDictDataModel struct {
		cache.Cache
		table  string
		gormDB *gorm.DB
	}

	DictData struct {
		modelx.ModelWithCommon
		DictTypeId string    `json:"dictTypeId" comment:"字典_主键" gorm:"column:dict_type_id;size:256;comment:字典_主键;"`
		Sort       int64     `json:"sort" comment:"排序" gorm:"column:sort;size:2;comment:排序;"`
		Label      string    `json:"label" comment:"字典标签" gorm:"column:label;size:256;comment:字典标签;"`
		Value      string    `json:"value" comment:"字典值" gorm:"column:value;size:256;comment:字典值;"`
		IsDefault  bool      `json:"isDefault" comment:"是否默认" gorm:"column:is_default;size:1;comment:是否默认;"`
		DictType   *DictType `json:"dictType" db:"-" `
	}
)

// TableName DictData 表名
func (DictData) TableName() string {
	return "admin_dict_data"
}

func newDictDataModel(c cache.Cache, gormx *gorm.DB) *defaultDictDataModel {
	return &defaultDictDataModel{
		Cache:  c,
		table:  "admin_dict_data",
		gormDB: gormx,
	}
}

func (m *defaultDictDataModel) FindOne(ctx context.Context, id interface{}) (*DictData, error) {
	publicAdminDictDataIdKey := fmt.Sprintf("%s%v", cacheAdminDictDataIdPrefix, id)
	var resp DictData

	err := m.GetCtx(ctx, publicAdminDictDataIdKey, &resp)
	if err != nil {
		err := m.gormDB.First(&resp, "id = ?", id).Error
		switch err {
		case nil:
			err = m.SetCtx(ctx, publicAdminDictDataIdKey, resp)
		default:
			if err.Error() == modelx.ErrNotFound.Error() {
				return nil, modelx.ErrNotFound
			}
			return nil, err
		}
	}
	return &resp, nil
}

func (m *defaultDictDataModel) Insert(ctx context.Context, data *DictData) (*DictData, error) {
	newUUID := uuid.New()
	data.Id = newUUID
	publicAdminDictDataIdKey := fmt.Sprintf("%s%v", cacheAdminDictDataIdPrefix, data.Id)
	err := m.gormDB.Create(data).Error
	if err != nil {
		return nil, err
	}
	_ = m.DelCtx(ctx, publicAdminDictDataIdKey)
	return data, nil
}

func (m *defaultDictDataModel) Update(ctx context.Context, newData *DictData) error {
	err := m.gormDB.Save(newData).Error
	if err != nil {
		return err
	}
	publicAdminDictDataIdKey := fmt.Sprintf("%s%v", cacheAdminDictDataIdPrefix, newData.Id)
	_ = m.DelCtx(ctx, publicAdminDictDataIdKey)
	return nil
}

func (m *defaultDictDataModel) Delete(ctx context.Context, id interface{}) error {
	publicAdminDictDataIdKey := fmt.Sprintf("%s%v", cacheAdminDictDataIdPrefix, id)
	_, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	err = m.gormDB.Delete(&DictData{}, "id = ?", id).Error
	if err != nil {
		return err
	}
	_ = m.DelCtx(ctx, publicAdminDictDataIdKey)
	return nil
}

func (m *defaultDictDataModel) tableName() string {
	return m.table
}
