// errCode generated by gocode. DO NOT EDIT!
package adminmodel

import (
	"context"
	"fmt"
	"github.com/google/uuid"
	_ "github.com/lib/pq"
	"github.com/qiaogw/gocode/common/modelx"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"gorm.io/gorm"
	"time"
)

var cacheAdminOperaLogIdPrefix = "cache:admin:operaLog:id:"

type (
	operaLogModel interface {
		Insert(ctx context.Context, data *OperaLog) (*OperaLog, error)
		FindOne(ctx context.Context, id interface{}) (*OperaLog, error)
		Update(ctx context.Context, newData *OperaLog) error
		Delete(ctx context.Context, id interface{}) error
	}

	defaultOperaLogModel struct {
		cache.Cache
		table  string
		gormDB *gorm.DB
	}

	OperaLog struct {
		modelx.ModelWithCommon
		Title         string    `json:"title" comment:"标题" gorm:"column:title;size:256;comment:标题;"`
		BusinessType  string    `json:"businessType" comment:"操作类型" gorm:"column:business_type;size:256;comment:操作类型;"`
		BusinessTypes string    `json:"businessTypes" comment:"BusinessTypes" gorm:"column:business_types;size:256;comment:BusinessTypes;"`
		Method        string    `json:"method" comment:"请求类型" gorm:"column:method;size:256;comment:请求类型;"`
		RequestMethod string    `json:"requestMethod" comment:"请求方式" gorm:"column:request_method;size:256;comment:请求方式;"`
		OperatorType  string    `json:"operatorType" comment:"operator_type" gorm:"column:operator_type;size:256;comment:operator_type;"`
		OperName      string    `json:"operName" comment:"操作者" gorm:"column:oper_name;size:256;comment:操作者;"`
		DeptName      string    `json:"deptName" comment:"部门名称" gorm:"column:dept_name;size:256;comment:部门名称;"`
		OperUrl       string    `json:"operUrl" comment:"访问地址" gorm:"column:oper_url;size:255;comment:访问地址;"`
		OperIp        string    `json:"operIp" comment:"客户端ip" gorm:"column:oper_ip;size:256;comment:客户端ip;"`
		OperLocation  string    `json:"operLocation" comment:"访问位置" gorm:"column:oper_location;size:256;comment:访问位置;"`
		OperParam     string    `json:"operParam" comment:"请求参数" gorm:"column:oper_param;size:255;comment:请求参数;"`
		Status        string    `json:"status" comment:"状态" gorm:"column:status;size:4;comment:状态;"`
		OperTime      time.Time `json:"operTime" comment:"操作时间" gorm:"column:oper_time;size:8;comment:操作时间;"`
		JsonResult    string    `json:"jsonResult" comment:"返回数据" gorm:"column:json_result;size:255;comment:返回数据;"`
		LatencyTime   string    `json:"latencyTime" comment:"耗时" gorm:"column:latency_time;size:256;comment:耗时;"`
		UserAgent     string    `json:"userAgent" comment:"ua" gorm:"column:user_agent;size:255;comment:ua;"`
	}
)

// TableName OperaLog 表名
func (OperaLog) TableName() string {
	return "admin_opera_log"
}

func newOperaLogModel(c cache.Cache, gormx *gorm.DB) *defaultOperaLogModel {
	return &defaultOperaLogModel{
		Cache:  c,
		table:  "admin_opera_log",
		gormDB: gormx,
	}
}

func (m *defaultOperaLogModel) FindOne(ctx context.Context, id interface{}) (*OperaLog, error) {
	publicAdminOperaLogIdKey := fmt.Sprintf("%s%v", cacheAdminOperaLogIdPrefix, id)
	var resp OperaLog

	err := m.GetCtx(ctx, publicAdminOperaLogIdKey, &resp)
	if err != nil {
		err := m.gormDB.First(&resp, "id = ?", id).Error
		switch err {
		case nil:
			err = m.SetCtx(ctx, publicAdminOperaLogIdKey, resp)
		default:
			if err.Error() == modelx.ErrNotFound.Error() {
				return nil, modelx.ErrNotFound
			}
			return nil, err
		}
	}
	return &resp, nil
}

func (m *defaultOperaLogModel) Insert(ctx context.Context, data *OperaLog) (*OperaLog, error) {
	newUUID := uuid.New()
	data.Id = newUUID
	publicAdminOperaLogIdKey := fmt.Sprintf("%s%v", cacheAdminOperaLogIdPrefix, data.Id)
	err := m.gormDB.Create(data).Error
	if err != nil {
		return nil, err
	}
	_ = m.DelCtx(ctx, publicAdminOperaLogIdKey)
	return data, nil
}

func (m *defaultOperaLogModel) Update(ctx context.Context, newData *OperaLog) error {
	err := m.gormDB.Save(newData).Error
	if err != nil {
		return err
	}
	publicAdminOperaLogIdKey := fmt.Sprintf("%s%v", cacheAdminOperaLogIdPrefix, newData.Id)
	_ = m.DelCtx(ctx, publicAdminOperaLogIdKey)
	return nil
}

func (m *defaultOperaLogModel) Delete(ctx context.Context, id interface{}) error {
	publicAdminOperaLogIdKey := fmt.Sprintf("%s%v", cacheAdminOperaLogIdPrefix, id)
	_, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	err = m.gormDB.Delete(&OperaLog{}, "id = ?", id).Error
	if err != nil {
		return err
	}
	_ = m.DelCtx(ctx, publicAdminOperaLogIdKey)
	return nil
}

func (m *defaultOperaLogModel) tableName() string {
	return m.table
}
