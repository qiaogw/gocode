// Package model errCode generated by gocode. DO NOT EDIT!
package adminmodel

import (
	"context"
	"fmt"
	"github.com/google/uuid"
	"github.com/qiaogw/gocode/common/modelx"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"gorm.io/gorm"

	_ "github.com/lib/pq"
)

var (
	cacheAdminRoleIdPrefix       = "cache:admin:role:id:"
	cacheAdminRoleNamePrefix     = "cache:admin:role:name:"
	cacheAdminRoleCodePrefix     = "cache:admin:role:code:"
	cacheAdminRoleDetailIdPrefix = "cache:admin:roleDetail:id:"
)

type (
	roleModel interface {
		Insert(ctx context.Context, data *Role) (*Role, error)
		FindOne(ctx context.Context, id interface{}) (*Role, error)
		Update(ctx context.Context, newData *Role) error
		Delete(ctx context.Context, id interface{}) error
		FindOneByName(ctx context.Context, name string) (*Role, error)
		FindOneByCode(ctx context.Context, code string) (*Role, error)
		FindOneDetail(ctx context.Context, id interface{}) (*Role, error)
		AddUsers(ctx context.Context, newData *Role) error
	}

	defaultRoleModel struct {
		cache.Cache
		table  string
		gormDB *gorm.DB
	}

	Role struct {
		modelx.ModelWithCommon
		Name         string  `json:"name" comment:"名称" gorm:"column:name;size:256;comment:名称;"`
		Code         string  `json:"code" comment:"职务代码" gorm:"column:code;size:128;comment:职务代码;"`
		IsAdmin      bool    `json:"isAdmin" comment:"是否admin" gorm:"column:is_admin;size:1;comment:是否admin;"`
		DataScope    string  `json:"dataScope" comment:"数据范围" gorm:"column:data_scope;size:32;comment:数据范围;"`
		DataFilter   string  `json:"dataFilter" comment:"自定义过滤条件" gorm:"column:data_filter;size:2048;comment:自定义过滤条件;"`
		DefaultRoute string  `json:"defaultRoute" comment:"默认路由" gorm:"column:default_route;size:256;comment:默认路由;"`
		Users        []*User `json:"users" db:"-" gorm:"many2many:admin_user_role;"`
		Menus        []*Menu `json:"menus" db:"-" gorm:"many2many:admin_role_menu;"`
		Apis         []*Api  `json:"apis" db:"-" gorm:"many2many:admin_role_api;"`
	}
)

// TableName Role 表名
func (Role) TableName() string {
	return "admin_role"
}

func newRoleModel(c cache.Cache, gormx *gorm.DB) *defaultRoleModel {
	return &defaultRoleModel{
		Cache:  c,
		table:  "admin_role",
		gormDB: gormx,
	}
}

func (m *defaultRoleModel) FindOne(ctx context.Context, id interface{}) (*Role, error) {
	publicAdminRoleIdKey := fmt.Sprintf("%s%v", cacheAdminRoleIdPrefix, id)
	var resp Role

	err := m.GetCtx(ctx, publicAdminRoleIdKey, &resp)
	if err != nil {
		err := m.gormDB.First(&resp, "id = ?", id).Error
		switch err {
		case nil:
			err = m.SetCtx(ctx, publicAdminRoleIdKey, resp)
		default:
			if err.Error() == modelx.ErrNotFound.Error() {
				return nil, modelx.ErrNotFound
			}
			return nil, err
		}
	}
	return &resp, nil
}

func (m *defaultRoleModel) FindOneDetail(ctx context.Context, id interface{}) (*Role, error) {
	var resp Role

	publicAdminRoleDetailIdKey := fmt.Sprintf("%s%v", cacheAdminRoleDetailIdPrefix, id)
	err := m.GetCtx(ctx, publicAdminRoleDetailIdKey, &resp)
	if err != nil {
		err = m.gormDB.Preload("Menus").
			Preload("Apis").
			Preload("Users").Where("id = ?", id).First(&resp).Error
		switch err {
		case nil:
			err = m.SetCtx(ctx, publicAdminRoleDetailIdKey, resp)
		default:
			if err.Error() == modelx.ErrNotFound.Error() {
				return nil, modelx.ErrNotFound
			}
			return nil, err
		}
	}
	return &resp, nil
}
func (m *defaultRoleModel) FindOneByName(ctx context.Context, name string) (*Role, error) {
	var resp Role
	publicAdminRoleNameKey := fmt.Sprintf("%s%v", cacheAdminRoleNamePrefix, name)
	err := m.GetCtx(ctx, publicAdminRoleNameKey, &resp)
	if err != nil {
		err = m.gormDB.Where("name = ?", name).First(&resp).Error
		switch err {
		case nil:
			err = m.SetCtx(ctx, publicAdminRoleNameKey, resp)
		default:
			if err.Error() == modelx.ErrNotFound.Error() {
				return nil, modelx.ErrNotFound
			}
			return nil, err
		}
	}
	return &resp, nil
}
func (m *defaultRoleModel) FindOneByCode(ctx context.Context, code string) (*Role, error) {
	var resp Role
	publicAdminRoleCodeKey := fmt.Sprintf("%s%v", cacheAdminRoleCodePrefix, code)
	err := m.GetCtx(ctx, publicAdminRoleCodeKey, &resp)
	if err != nil {
		err = m.gormDB.Preload("Menus").
			Preload("Apis").
			Preload("Users").Where("code = ?", code).First(&resp).Error
		switch err {
		case nil:
			err = m.SetCtx(ctx, publicAdminRoleCodeKey, resp)
		default:
			if err.Error() == modelx.ErrNotFound.Error() {
				return nil, modelx.ErrNotFound
			}
			return nil, err
		}
	}
	return &resp, nil
}
func (m *defaultRoleModel) Insert(ctx context.Context, data *Role) (*Role, error) {
	newUUID := uuid.New()
	data.Id = newUUID
	publicAdminRoleIdKey := fmt.Sprintf("%s%v", cacheAdminRoleIdPrefix, data.Id)
	err := m.gormDB.Create(data).Error
	if err != nil {
		return nil, err
	}
	_ = m.DelCtx(ctx, publicAdminRoleIdKey)
	return data, nil
}

func (m *defaultRoleModel) Update(ctx context.Context, newData *Role) error {
	err := m.gormDB.Save(newData).Error
	if err != nil {
		return err
	}
	publicAdminRoleIdKey := fmt.Sprintf("%s%v", cacheAdminRoleIdPrefix, newData.Id)
	_ = m.DelCtx(ctx, publicAdminRoleIdKey)
	return nil
}

func (m *defaultRoleModel) AddUsers(ctx context.Context, newData *Role) error {
	_, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}
	m.gormDB.Model(newData).Association("Users").Replace(newData.Users)
	//err = m.gormDB.Save(newData).Error
	return err
}

func (m *defaultRoleModel) Delete(ctx context.Context, id interface{}) error {
	publicAdminRoleIdKey := fmt.Sprintf("%s%v", cacheAdminRoleIdPrefix, id)
	_, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	err = m.gormDB.Delete(&Role{}, "id = ?", id).Error
	if err != nil {
		return err
	}
	_ = m.DelCtx(ctx, publicAdminRoleIdKey)
	return nil
}

func (m *defaultRoleModel) tableName() string {
	return m.table
}
