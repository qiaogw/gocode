// Package model Code generated by gocode. DO NOT EDIT!
package model

import (
	"context"
	"fmt"
	"github.com/google/uuid"
	"github.com/qiaogw/gocode/common/modelx"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"gorm.io/gorm"

	_ "github.com/lib/pq"
)

var cacheAdminApiIdPrefix = "cache:admin:api:id:"

type (
	apiModel interface {
		Insert(ctx context.Context, data *Api) (*Api, error)
		FindOne(ctx context.Context, id interface{}) (*Api, error)
		Update(ctx context.Context, newData *Api) error
		Delete(ctx context.Context, id interface{}) error
		FindOneByPath(ctx context.Context, path string) (*Api, error)
	}

	defaultApiModel struct {
		cache.Cache
		table  string
		gormDB *gorm.DB
	}

	Api struct {
		Id uuid.UUID `json:"id" db:"id" gorm:"column:id;primaryKey;comment:主键编码"`

		modelx.ModelWithCommon
		Title  string  `json:"title" comment:"标题" gorm:"column:title;size:256;comment:标题;"`
		Path   string  `json:"path" comment:"路径" gorm:"column:path;size:256;comment:路径;"`
		Method string  `json:"method" comment:"请求类型" gorm:"column:method;size:256;comment:请求类型;"`
		Module string  `json:"module" comment:"api组" gorm:"column:module;size:256;comment:api组;"`
		Roles  []*Role `json:"roles" db:"-" gorm:"many2many:admin_role_api;"`
	}
)

// TableName Api 表名
func (Api) TableName() string {
	return "admin_api"
}

func newApiModel(c cache.Cache, gormx *gorm.DB) *defaultApiModel {
	_ = gormx.AutoMigrate(&Api{})
	return &defaultApiModel{
		Cache:  c,
		table:  "admin_api",
		gormDB: gormx,
	}
}

func (m *defaultApiModel) FindOne(ctx context.Context, id interface{}) (*Api, error) {
	publicAdminApiIdKey := fmt.Sprintf("%s%v", cacheAdminApiIdPrefix, id)
	var resp Api

	err := m.GetCtx(ctx, publicAdminApiIdKey, &resp)
	if err != nil {
		err := m.gormDB.First(&resp, "id = ?", id).Error
		switch err {
		case nil:
			err = m.SetCtx(ctx, publicAdminApiIdKey, resp)
		default:
			if err.Error() == modelx.ErrNotFound.Error() {
				return nil, modelx.ErrNotFound
			}
			return nil, err
		}
	}
	return &resp, nil
}
func (m *defaultApiModel) FindOneByPath(ctx context.Context, path string) (*Api, error) {
	var resp Api
	err := m.gormDB.Where("path = ?", path).First(&resp).Error
	switch err {
	case nil:
		return &resp, nil
	default:
		if err.Error() == modelx.ErrNotFound.Error() {
			return nil, modelx.ErrNotFound
		}
		return nil, err
	}
}

func (m *defaultApiModel) Insert(ctx context.Context, data *Api) (*Api, error) {
	newUUID := uuid.New()
	data.Id = newUUID
	publicAdminApiIdKey := fmt.Sprintf("%s%v", cacheAdminApiIdPrefix, data.Id)
	err := m.gormDB.Create(data).Error
	if err != nil {
		return nil, err
	}
	_ = m.DelCtx(ctx, publicAdminApiIdKey)
	return data, nil
}

func (m *defaultApiModel) Update(ctx context.Context, newData *Api) error {
	err := m.gormDB.Save(newData).Error
	if err != nil {
		return err
	}
	publicAdminApiIdKey := fmt.Sprintf("%s%v", cacheAdminApiIdPrefix, newData.Id)
	_ = m.DelCtx(ctx, publicAdminApiIdKey)
	return nil
}

func (m *defaultApiModel) Delete(ctx context.Context, id interface{}) error {
	publicAdminApiIdKey := fmt.Sprintf("%s%v", cacheAdminApiIdPrefix, id)
	_, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	err = m.gormDB.Delete(&Api{}, "id = ?", id).Error
	if err != nil {
		return err
	}
	_ = m.DelCtx(ctx, publicAdminApiIdKey)
	return nil
}

func (m *defaultApiModel) tableName() string {
	return m.table
}
