// Package model errCode generated by gocode. DO NOT EDIT!
package model

import (
	"context"
	"fmt"
	"github.com/google/uuid"
	"github.com/qiaogw/gocode/common/modelx"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"gorm.io/gorm"

	_ "github.com/lib/pq"
)

var cacheAdminDictTypeIdPrefix = "cache:admin:dictType:id:"

type (
	dictTypeModel interface {
		Insert(ctx context.Context, data *DictType) (*DictType, error)
		FindOne(ctx context.Context, id interface{}) (*DictType, error)
		Update(ctx context.Context, newData *DictType) error
		Delete(ctx context.Context, id interface{}) error
	}

	defaultDictTypeModel struct {
		cache.Cache
		table  string
		gormDB *gorm.DB
	}

	DictType struct {
		modelx.ModelWithCommon
		Name      string      `json:"name" comment:"名称" gorm:"column:name;size:256;comment:名称;"`
		Type      string      `json:"type" comment:"菜单类型" gorm:"column:type;size:128;comment:菜单类型;"`
		DictDatas []*DictData `json:"dictDatas" db:"-" `
	}
)

// TableName DictType 表名
func (DictType) TableName() string {
	return "admin_dict_type"
}

func newDictTypeModel(c cache.Cache, gormx *gorm.DB) *defaultDictTypeModel {
	return &defaultDictTypeModel{
		Cache:  c,
		table:  "admin_dict_type",
		gormDB: gormx,
	}
}

func (m *defaultDictTypeModel) FindOne(ctx context.Context, id interface{}) (*DictType, error) {
	publicAdminDictTypeIdKey := fmt.Sprintf("%s%v", cacheAdminDictTypeIdPrefix, id)
	var resp DictType

	err := m.GetCtx(ctx, publicAdminDictTypeIdKey, &resp)
	if err != nil {
		err := m.gormDB.First(&resp, "id = ?", id).Error
		switch err {
		case nil:
			err = m.SetCtx(ctx, publicAdminDictTypeIdKey, resp)
		default:
			if err.Error() == modelx.ErrNotFound.Error() {
				return nil, modelx.ErrNotFound
			}
			return nil, err
		}
	}
	return &resp, nil
}

func (m *defaultDictTypeModel) Insert(ctx context.Context, data *DictType) (*DictType, error) {
	newUUID := uuid.New()
	data.Id = newUUID
	publicAdminDictTypeIdKey := fmt.Sprintf("%s%v", cacheAdminDictTypeIdPrefix, data.Id)
	err := m.gormDB.Create(data).Error
	if err != nil {
		return nil, err
	}
	_ = m.DelCtx(ctx, publicAdminDictTypeIdKey)
	return data, nil
}

func (m *defaultDictTypeModel) Update(ctx context.Context, newData *DictType) error {
	err := m.gormDB.Save(newData).Error
	if err != nil {
		return err
	}
	publicAdminDictTypeIdKey := fmt.Sprintf("%s%v", cacheAdminDictTypeIdPrefix, newData.Id)
	_ = m.DelCtx(ctx, publicAdminDictTypeIdKey)
	return nil
}

func (m *defaultDictTypeModel) Delete(ctx context.Context, id interface{}) error {
	publicAdminDictTypeIdKey := fmt.Sprintf("%s%v", cacheAdminDictTypeIdPrefix, id)
	_, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	err = m.gormDB.Delete(&DictType{}, "id = ?", id).Error
	if err != nil {
		return err
	}
	_ = m.DelCtx(ctx, publicAdminDictTypeIdKey)
	return nil
}

func (m *defaultDictTypeModel) tableName() string {
	return m.table
}
