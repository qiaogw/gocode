// Package model errCode generated by gocode. DO NOT EDIT!
package model

import (
	"context"
	"fmt"
	"github.com/google/uuid"
	"github.com/qiaogw/gocode/common/modelx"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"gorm.io/gorm"

	_ "github.com/lib/pq"
)

var cacheAdminDeptIdPrefix = "cache:admin:dept:id:"

type (
	deptModel interface {
		Insert(ctx context.Context, data *Dept) (*Dept, error)
		FindOne(ctx context.Context, id interface{}) (*Dept, error)
		Update(ctx context.Context, newData *Dept) error
		Delete(ctx context.Context, id interface{}) error
	}

	defaultDeptModel struct {
		cache.Cache
		table  string
		gormDB *gorm.DB
	}

	Dept struct {
		modelx.ModelWithCommon
		ParentId string  `json:"parentId" comment:"父菜单" gorm:"column:parent_id;size:256;comment:父菜单;"`
		Name     string  `json:"name" comment:"名称" gorm:"column:name;size:256;comment:名称;"`
		Sort     int64   `json:"sort" comment:"排序" gorm:"column:sort;size:2;comment:排序;"`
		Leader   string  `json:"leader" comment:"领导" gorm:"column:leader;size:256;comment:领导;"`
		Phone    string  `json:"phone" comment:"电话" gorm:"column:phone;size:256;comment:电话;"`
		Email    string  `json:"email" comment:"email" gorm:"column:email;size:256;comment:email;"`
		Users    []*User `json:"users" db:"-"`
	}
)

// TableName Dept 表名
func (Dept) TableName() string {
	return "admin_dept"
}

func newDeptModel(c cache.Cache, gormx *gorm.DB) *defaultDeptModel {
	return &defaultDeptModel{
		Cache:  c,
		table:  "admin_dept",
		gormDB: gormx,
	}
}

func (m *defaultDeptModel) FindOne(ctx context.Context, id interface{}) (*Dept, error) {
	publicAdminDeptIdKey := fmt.Sprintf("%s%v", cacheAdminDeptIdPrefix, id)
	var resp Dept

	err := m.GetCtx(ctx, publicAdminDeptIdKey, &resp)
	if err != nil {
		err := m.gormDB.First(&resp, "id = ?", id).Error
		switch err {
		case nil:
			err = m.SetCtx(ctx, publicAdminDeptIdKey, resp)
		default:
			if err.Error() == modelx.ErrNotFound.Error() {
				return nil, modelx.ErrNotFound
			}
			return nil, err
		}
	}
	return &resp, nil
}

func (m *defaultDeptModel) Insert(ctx context.Context, data *Dept) (*Dept, error) {
	newUUID := uuid.New()
	data.Id = newUUID
	publicAdminDeptIdKey := fmt.Sprintf("%s%v", cacheAdminDeptIdPrefix, data.Id)
	err := m.gormDB.Create(data).Error
	if err != nil {
		return nil, err
	}
	_ = m.DelCtx(ctx, publicAdminDeptIdKey)
	return data, nil
}

func (m *defaultDeptModel) Update(ctx context.Context, newData *Dept) error {
	err := m.gormDB.Save(newData).Error
	if err != nil {
		return err
	}
	publicAdminDeptIdKey := fmt.Sprintf("%s%v", cacheAdminDeptIdPrefix, newData.Id)
	_ = m.DelCtx(ctx, publicAdminDeptIdKey)
	return nil
}

func (m *defaultDeptModel) Delete(ctx context.Context, id interface{}) error {
	publicAdminDeptIdKey := fmt.Sprintf("%s%v", cacheAdminDeptIdPrefix, id)
	_, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	err = m.gormDB.Delete(&Dept{}, "id = ?", id).Error
	if err != nil {
		return err
	}
	_ = m.DelCtx(ctx, publicAdminDeptIdKey)
	return nil
}

func (m *defaultDeptModel) tableName() string {
	return m.table
}
